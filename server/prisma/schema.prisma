generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum MemberType {
  CCPE
  PCPE
}

enum ActionType {
  REGISTERED
  RENEWED
}

model User {
  id        String    @id @default(uuid())
  // TODO: make email not optional
  email     String?   @unique @db.VarChar(55)
  name      String?   @db.VarChar(255)
  username  String    @unique @db.VarChar(55)
  password  String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model MemberName {
  id         String    @id @default(uuid())
  firstName  String    @db.VarChar(55)
  middleName String?   @db.VarChar(55)
  lastName   String    @db.VarChar(55)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  member   Member @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  memberId String @unique
}

model Picture {
  id        String    @id @default(uuid())
  picture   String    @db.VarChar(110)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  member   Member @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  memberId String @unique
}

model Receipt {
  id        String    @id @default(uuid())
  receipt   String    @db.VarChar(110)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  member   Member @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  memberId String @unique
}

model Signature {
  id        String    @id @default(uuid())
  signature String    @db.VarChar(110)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  member   Member @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  memberId String @unique
}

model RegionalCertificate {
  id           String    @id @default(uuid())
  regionalCert String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  member   Member @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  memberId String @unique
}

model NationalCertificate {
  id           String    @id @default(uuid())
  nationalCert String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  member   Member @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  memberId String @unique
}

model Member {
  id                 String      @id @default(uuid())
  address            String      @db.VarChar(255)
  birthPlace         String      @db.VarChar(55)
  zipCode            String      @db.VarChar(4)
  mobileNumber       String      @db.VarChar(11)
  email              String      @unique @db.VarChar(55)
  gender             Gender
  type               MemberType?
  typeNo             String?     @unique @db.VarChar(55)
  dateIdValidity     DateTime    @db.Date
  transactionDetails String      @db.VarChar(255)
  region             String      @db.VarChar(55)
  batchNo            String      @db.VarChar(12)
  amountPaid         Decimal     @db.Decimal(10, 2)
  submittedAt        DateTime    @db.Date
  actionTaken        ActionType
  createdAt          DateTime    @default(now())
  updatedAt          DateTime?   @updatedAt

  name         MemberName?
  picture      Picture?
  receipt      Receipt?
  signature    Signature?
  regionalCert RegionalCertificate?
  nationalCert NationalCertificate?
}
